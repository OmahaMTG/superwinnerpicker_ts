{"version":3,"sources":["kong.ts","platform.ts","game.ts"],"names":["Kong","Kong.constructor","Platform","Platform.constructor","Platform.calculateTotalRows","Platform.calculateTotalColumns","Platform.createMainPlaforms","Platform.createKongPlatform","WinnerPicker","WinnerPicker.constructor","WinnerPicker.preload","WinnerPicker.create","WinnerPicker.update"],"mappings":"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","file":"kong.js","sourcesContent":["///<reference path=\"../../tools/typings/tsd.d.ts\" />\r\n///<reference path=\"../../tools/typings/typescriptApp.d.ts\" />\r\n\r\nclass Kong extends Phaser.Sprite{\r\n\tprivate arcadeBody: Phaser.Physics.Arcade.Body;\r\n\r\n\tconstructor(game: Phaser.Game, kongRowHeight: number) {\r\n        super(game, 125, kongRowHeight - (34 * 3), 'kong');\r\n\t\tthis.scale.set(3, 3);\r\n\t\tthis.game.physics.arcade.enableBody(this);\r\n\t\tthis.game.physics.arcade.enable;\r\n\r\n\t\tthis.arcadeBody = <Phaser.Physics.Arcade.Body>this.body;\r\n\t\tthis.arcadeBody.collideWorldBounds = true;\r\n\t\tthis.arcadeBody.gravity.y = 300;\r\n\t\tthis.animations.add('wait', [2, 3], 1, true);\r\n\t\tthis.animations.add('angry', [0, 1], 2, true);\r\n\t\tthis.animations.play('wait', null, true);\r\n\t}\r\n\r\n}","///<reference path=\"../../tools/typings/tsd.d.ts\" />\r\n///<reference path=\"../../tools/typings/typescriptApp.d.ts\" />\r\n\r\nclass Platform extends Phaser.Group{\r\n    private platformHeight = 24;\r\n    private spaceBetweenPlatforms = 120;\r\n    private kongPlatformSpace = 200;\r\n    private rowHeightOffset: number;\r\n    public gameRowHeights: number[] = [];\r\n    public kongRowHeight: number;\r\n\r\n    calculateTotalRows() : number {\r\n        return Math.floor((this.game.height - this.platformHeight - this.kongPlatformSpace) / this.spaceBetweenPlatforms);\r\n    }\r\n\r\n    calculateTotalColumns() : number {\r\n        return  this.game.width / (15 * 3);\r\n    }\r\n\r\n    constructor(game: Phaser.Game) {\r\n        super(game);\r\n        this.rowHeightOffset =  this.game.height - this.platformHeight;\r\n        this.enableBody = true;\r\n        this.createMainPlaforms();\r\n        this.createKongPlatform();\r\n    }\r\n\r\n    createMainPlaforms() {\r\n        console.log('adding %s platform Rows', this.calculateTotalRows());\r\n        for (var row = 0; row < this.calculateTotalRows(); row++) {\r\n\r\n            for (var column = 0; column < this.calculateTotalColumns(); column++) {\r\n                var ground = this.create(column * (15 * 3),  this.rowHeightOffset, 'platform');\r\n                ground.scale.setTo(3, 3);\r\n                ground.body.immovable = true;\r\n            }\r\n            this.gameRowHeights.push(this.rowHeightOffset);\r\n            this.rowHeightOffset -= this.spaceBetweenPlatforms;\r\n        }\r\n    }\r\n\r\n    createKongPlatform() {\r\n        for (var column = 0; column < 6; column++) {\r\n            var ground = this.create(column * (15 * 3), this.rowHeightOffset, 'platform');\r\n            ground.scale.setTo(3, 3);\r\n            ground.body.immovable = true;\r\n        }\r\n        console.log('setting kongRowHeight to %s', this.rowHeightOffset);\r\n        this.kongRowHeight = this.rowHeightOffset;\r\n    }\r\n}","///<reference path=\"../../tools/typings/tsd.d.ts\" />\r\n///<reference path=\"../../tools/typings/typescriptApp.d.ts\" />\r\nclass WinnerPicker {\r\n\r\n    constructor(width: number ) {\r\n        this.game = new Phaser.Game(width, 600, Phaser.AUTO, 'stage',\r\n            { preload: this.preload, create: this.create, update: this.update});\r\n    }\r\n\r\n    game: Phaser.Game;\r\n    platform : Platform;\r\n    kong : Kong;\r\n\r\n    preload() {\r\n        this.game.load.image('platform', 'src/img/platform.png');\r\n        this.game.load.spritesheet('kong', 'src/img//kong.png', 48, 34);\r\n    }\r\n\r\n    create() {\r\n        this.platform = new Platform(this.game);\r\n        this.kong = new Kong(this.game, this.platform.kongRowHeight);\r\n        this.game.add.existing(this.kong);\r\n    }\r\n\r\n    update() {\r\n        this.game.physics.arcade.collide(this.kong, this.platform);\r\n       // this.game.input.keyboard.addKey(Phaser.Keyboard.UP);\r\n    }\r\n}\r\n\r\n\r\nwindow.onload = () => {\r\n    var stageWidth = $('#stage').width();\r\n    // var game = new SimpleGame(stageWidth, () => {\r\n    //     alert('done'); \r\n    //     console.log(game.platform)\r\n    // });\r\n    var game = new WinnerPicker(stageWidth);\r\n\r\n\r\n\r\n\r\n};"],"sourceRoot":"/source/"}